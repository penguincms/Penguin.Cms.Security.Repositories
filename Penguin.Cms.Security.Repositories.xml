<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Cms.Security.Repositories</name>
    </assembly>
    <members>
        <member name="T:Penguin.Cms.Security.Repositories.EmailValidationRepository">
            <summary>
            An IRepository implementation for Email Validation tokens
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Repositories.EmailValidationRepository.EmailTemplateRepository">
            <summary>
            Email template repository for sending out validation emails
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Repositories.EmailValidationRepository.UserRepository">
            <summary>
            User repository for accessing users
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext{Penguin.Cms.Security.EmailValidationToken},Penguin.Email.Templating.Abstractions.Interfaces.ISendTemplates,Penguin.Cms.Repositories.Interfaces.IEntityRepository{Penguin.Cms.Security.User},Penguin.Messaging.Core.MessageBus)">
            <summary>
            Constructs a new instance of this repository
            </summary>
            <param name="context">A Persistence context for Email Tokens</param>
            <param name="emailTemplateRepository">An EmailTemplate repository</param>
            <param name="userRepository">A User repository</param>
            <param name="messageBus">An optional message bus for sending persistence messages</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.GenerateEmail(Penguin.Cms.Security.User,System.String)">
            <summary>
            Generates a validation email and sends it to the user
            </summary>
            <param name="user">The user to validate</param>
            <param name="linkUrl">Passed in value not sent. Only used for templating</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.GenerateToken(Penguin.Cms.Security.User,System.String)">
            <summary>
            Generates and persists a new email token for the given user
            </summary>
            <param name="u">The user to generate a token for</param>
            <param name="LinkUrl">Passed in value not sent. Only used for templating</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.GenerateToken(System.Guid,System.String)">
            <summary>
            Generates and persists a new email token for the given user
            </summary>
            <param name="userGuid">The user to generate a token for</param>
            <param name="LinkUrl">Passed in value not sent. Only used for templating</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.IsTokenExpired(System.Guid)">
            <summary>
            Returns true if a token doesn't exist, or is expired
            </summary>
            <param name="TokenId">The token to check for</param>
            <returns>True if there is a valid, unexpired token</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.IsValidated(Penguin.Cms.Security.User)">
            <summary>
            Returns true if the user has validated their email
            </summary>
            <param name="u">The user to check for</param>
            <returns>True if the user has validated their email</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.IsValidated(System.Guid)">
            <summary>
            Returns true if the user has validated their email
            </summary>
            <param name="userGuid">The user to check for</param>
            <returns>True if the user has validated their email</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EmailValidationRepository.ValidateToken(System.Guid)">
            <summary>
            Checks to see if the token if the Token is valid
            </summary>
            <param name="TokenId">The Guid of the Token to check</param>
            <returns>If the token is found, and valid</returns>
        </member>
        <member name="T:Penguin.Cms.Security.Repositories.EntityPermissionsRepository">
            <summary>
            A repository for accessing entity permissions
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext{Penguin.Cms.Security.EntityPermissions},Penguin.Cms.Repositories.Interfaces.IEntityRepository{Penguin.Cms.Security.SecurityGroup},Penguin.Messaging.Core.MessageBus)">
            <summary>
            Constructs this repository using the given values
            </summary>
            <param name="context">The underlying context to use for persistence</param>
            <param name="securityGroupRepository"></param>
            <param name="messageBus">An optional message bus for event notification</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.Add(Penguin.Cms.Security.EntityPermissions)">
            <summary>
            Adds the whole set of permissions to a new or existing instance of permissions
            </summary>
            <param name="o">The new entity permissions</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AddOrUpdate(Penguin.Cms.Security.EntityPermissions)">
            <summary>
            Updates any existing entity permissions or adds if they're new
            </summary>
            <param name="o">The updated entity permissions</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AddOrUpdateRange(System.Collections.Generic.IEnumerable{Penguin.Cms.Security.EntityPermissions})">
            <summary>
            Updates any existing entity permissions or adds if they're new
            </summary>
            <param name="o">The updated entity permissions</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AddPermission(Penguin.Cms.Entities.Entity,Penguin.Cms.Security.SecurityGroup,Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Adds the specified permissions to the Entity
            </summary>
            <param name="target">The entity that the permissions are applied to</param>
            <param name="securityGroup">The security group being granted the permissions</param>
            <param name="permissionTypes">The permission types to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AddPermission(System.Guid,Penguin.Cms.Security.SecurityGroup,Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Adds the specified permissions to the Entity
            </summary>
            <param name="target">The entity that the permissions are applied to</param>
            <param name="securityGroup">The security group being granted the permissions</param>
            <param name="permissionTypes">The permission types to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AddRange(System.Collections.Generic.IEnumerable{Penguin.Cms.Security.EntityPermissions})">
            <summary>
            Adds the whole set of permissions to a new or existing instance of permissions
            </summary>
            <param name="o">The new entity permissions</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AllowsAccessType(System.Guid,Penguin.Security.Abstractions.Interfaces.IUser,Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Checks if the given entity allows a given kind of access for the specified user
            </summary>
            <param name="target">The Guid of the entity that is being accessed</param>
            <param name="user">The user doing the accessing</param>
            <param name="permissionTypes">The permission types needed to perform the action</param>
            <returns>True if the user is allowed to continue</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.AllowsAccessType(Penguin.Cms.Entities.Entity,Penguin.Security.Abstractions.Interfaces.IUser,Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Checks if the given entity allows a given kind of access for the specified user
            </summary>
            <param name="target">The entity the user is trying to access</param>
            <param name="user">The user doing the accessing</param>
            <param name="permissionTypes">The permission types needed to perform the action</param>
            <returns>True if the user is allowed to continue</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.GetForEntity(Penguin.Cms.Entities.Entity)">
            <summary>
            Retrieves the permissions for a single entity
            </summary>
            <param name="target">The target entity to retrieve permissions for</param>
            <returns>The permissions applicable to the entity</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.GetForEntity(System.Guid)">
            <summary>
            Retrieves the permissions for a single entity
            </summary>
            <param name="target">The target entities guid to retrieve permissions for</param>
            <returns>The permissions applicable to the entity</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.Update(Penguin.Cms.Security.EntityPermissions)">
            <summary>
            Updates any existing entity permissions or adds if they're new
            </summary>
            <param name="o">The updated entity permissions</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.EntityPermissionsRepository.UpdateRange(System.Collections.Generic.IEnumerable{Penguin.Cms.Security.EntityPermissions})">
            <summary>
            Updates any existing entity permissions or adds if they're new
            </summary>
            <param name="o">The updated entity permissions</param>
        </member>
        <member name="T:Penguin.Cms.Security.Repositories.UserRepository">
            <summary>
            A default implementation of an IRepository for users containing helpful methods
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Repositories.UserRepository.GroupRepository">
            <summary>
            Group repository for assigning default groups
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Repositories.UserRepository.RoleRepository">
            <summary>
            Role repository for assigning default roles
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext{Penguin.Cms.Security.User},Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Security.Role},Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Security.Group},Penguin.Messaging.Core.MessageBus)">
            <summary>
            Constructs a new instance of this repository
            </summary>
            <param name="context">An IPersistence context implementation for Users</param>
            <param name="roleRepository">A role repository for getting default roles</param>
            <param name="groupRepository">A group repository for getting default groups</param>
            <param name="messageBus">An optional message bus for persistence messages</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.AcceptMessage(Penguin.Messaging.Persistence.Messages.Creating{Penguin.Cms.Security.User})">
            <summary>
            Message handler for creating a user, user to ensure that all defaults are properly assigned
            </summary>
            <param name="message">Persistence message containing the user being created</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.Add(Penguin.Cms.Security.User)">
            <summary>
            Adds a new user and assigns default groups/roles
            </summary>
            <param name="o">Users to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.AddOrUpdate(Penguin.Cms.Security.User)">
            <summary>
            Adds or updates a new user and assigns default groups/roles
            </summary>
            <param name="o">Users to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.AddOrUpdateRange(System.Collections.Generic.IEnumerable{Penguin.Cms.Security.User})">
            <summary>
            Adds or updates a new user and assigns default groups/roles
            </summary>
            <param name="o">Users to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.AddRange(System.Collections.Generic.IEnumerable{Penguin.Cms.Security.User})">
            <summary>
            Adds a new user and assigns default groups/roles
            </summary>
            <param name="o">Users to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.Find(System.Int32)">
            <summary>
            Gets a user by ID, or returns a Guest user instance if the Id is 0 or doesn't exist
            </summary>
            <param name="Id">The user to get</param>
            <returns> a user by ID, or returns a Guest user instance if the Id is 0 or doesn't exist</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.GetByEmail(System.String)">
            <summary>
            Gets a user with a matching email
            </summary>
            <param name="email">The email to check for</param>
            <returns>A user with a matching email, or null if none</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.GetByLogin(System.String)">
            <summary>
            Gets a user with a matching login
            </summary>
            <param name="login">The login to get</param>
            <returns>A user with a  matching login, or null if none</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.GetByLoginPassword(System.String,System.String)">
            <summary>
            Gets a user matching the supplied username and password
            </summary>
            <param name="login">The login to check for</param>
            <param name="password">The password the user must have</param>
            <returns>A user if the login information is correct, or null if not</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.Update(Penguin.Cms.Security.User)">
            <summary>
            Updates an existing user and adds default roles
            </summary>
            <param name="o">User to update</param>
        </member>
        <member name="M:Penguin.Cms.Security.Repositories.UserRepository.UpdateRange(System.Collections.Generic.IEnumerable{Penguin.Cms.Security.User})">
            <summary>
            Updates an existing user and adds default roles
            </summary>
            <param name="o">User to update</param>
        </member>
    </members>
</doc>